/* *  Jogo da Glória (projecto para Interacção Homem-Máquina) *  Copyright (C) 2013  Helder Correia * *  This program is free software; you can redistribute it and/or modify *  it under the terms of the GNU General Public License as published by *  the Free Software Foundation; either version 2 of the License, or *  (at your option) any later version. * *  This program is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *  GNU General Public License for more details. * *  You should have received a copy of the GNU General Public License along *  with this program; if not, write to the Free Software Foundation, Inc., *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */package org.siriux {	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.EventDispatcher;	public class Player extends EventDispatcher {		public static const STOP = "Player Stopped";		private var _name:String;		private var _player:MovieClip;		private var _right:int = 0; 	// number of right answers		private var _wrong:int = 0;		// number of wrong answers		private var _position:int = 0;  // the position or house the player is at		private var _id:String;			// unique instance name		public function Player(name:String, player:MovieClip) {			_name = name;			_player = player;		}		public function get name():String {			return _name;		}		public function get movieClip():MovieClip {			return _player;		}		public function set id(id:String) {			_id = id;		}		public function get id():String {			return _id;		}		public function answer(correct:Boolean) {			if (correct) {				_right++;			} else {				_wrong++;			}		}		public function get right():int {			return _right;		}		public function get wrong():int {			return _wrong;		}		public function set position(pos:int) {			_position = pos;		}		public function get position():int {			return _position;		}		public function forward(i:int) {			moveTo(_position+i);		}		public function rewind(i:int) {			moveTo(_position-i);		}		public function moveTo(pos:int) {			if (pos == _position) {				return;			}			if (pos < 0) {				pos = 0;			}			if (pos > 30) {				pos = 30;			}			var forward:Boolean = (pos > _position);			_player.addEventListener(Event.ENTER_FRAME, frameHandler);			_player.dispatchEvent(new Event(Event.ENTER_FRAME));			function frameHandler(evt:Event) {				if (_player.currentFrameLabel != null && int(_player.currentFrameLabel) == pos) {					_player.removeEventListener(Event.ENTER_FRAME, frameHandler);					_position = pos;					dispatchEvent(new Event(STOP));				}				else {					if (forward) {						_player.nextFrame();					} else {						_player.prevFrame();					}				}			}		}	}}